stages:
  - test
  - prerun_setup
  # - test
  - build
  - deploy


# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
 # - apt-get update
 # - apt-get install -y ffmpeg
  - python -V  # Print out python version for debugging
  - pip3 install virtualenv
  - virtualenv venv
  - source venv/bin/activate


Setup_Requirements:
  stage: prerun_setup
  script:
    - echo "PreRun Setup"
    - source venv/bin/activate
    - pip3 install -r requirements.txt


Code_Runner:
  stage: test
  script:
    - source venv/bin/activate
    - ./startup.sh
    - ls

Docker_Image_Builder:
  before_script:
    - ''
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG --destination $CI_REGISTRY_IMAGE:latest
  rules:
    - if: $CI_COMMIT_TAG


deploy-prod:
#  only:
#    - pushes
  stage: deploy
  before_script:
  # Adding environment's variable SSH_PRIVATE_KEY to the SSH client's agent that manages the private keys
    - apt install openssh-client # Add SSH client for alpine 
    - eval $(ssh-agent -s) # Run the SSH client 
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    # -o StrictHostKeyCheking=no is to disable strict host key checking in SSH
    # Making ENV TELEGRAM_TOKEN2 available on Remote host
    - LC_TELEGRAM_TOKEN2=$TELEGRAM_TOKEN2
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "TELEGRAM_TOKEN2=$LC_TELEGRAM_TOKEN2"
    # Connecting to the server using SSH and changing dir
    # - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /home/$SERVER_USER/docker/services/telegram/kala2xBot"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull registry.seedelmann.ch/kalabint/webm2mp4:latest"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f kala2xBot_Docker || true"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -e TELEGRAM_TOKEN=$TELEGRAM_TOKEN2 --name kala2xBot_Docker registry.seedelmann.ch/kalabint/webm2mp4:latest"
  rules:
     - if: $CI_COMMIT_TAG
